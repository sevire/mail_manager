import reportitemmanager
import datetime
import unittest


class TestEmailParsing(unittest.TestCase):
    def setUp(self):
        self.test_date = self.helper_date("2017-10-30")
        self.test_time = self.helper_time("15:00:00")

    def check_item(self, date, time, parse_string, expected_values):
        parser = reportitemmanager.ReportItemManager()

        item_object = parser.parse_string(date, time, parse_string, )
        # item_object.print_fields()

        self.assertEqual(expected_values["date"], item_object.get_date())
        assert item_object.get_time() == expected_values["time"]
        assert item_object.get_item() == expected_values["item"]
        assert item_object.get_value() == expected_values["value"]

        print

    def test_parse_string(self):
        # Now the tests.  Use specific strings and check that expected results are generated by the parsing engine

        # Simulate date and time from email header.  Change as required for each test case.
        default_date = self.helper_date("2017-10-30")
        default_time = self.helper_time("15:00:00")

        date = default_date,
        time = default_time
        self.check_item(
            date,
            time,
            "item:squirt val:30",
            {
                "item": "squirt",
                "date": date,
                "time": time,
                "value": 30
            })

        date = default_date,
        time = default_time
        self.check_item(
            date,
            time,
            "item:squirt date:2017-10-18 val:30",
            {
                "item": "squirt",
                "date": self.helper_date("2017-10-18"),
                "time": time,
                "value": 30
            })

        date = default_date,
        time = default_time
        self.check_item(
            date,
            time,
            "item:play date:2017-10-19 val:30",
            {
                "item": "play",
                "date": self.helper_date("2017-10-19"),
                "time": time,
                "value": 30
            })

        date = default_date,
        time = default_time
        self.check_item(
            date,
            time,
            "item:up date:2017-10-21 time:08:50",
            {
                "item": "up",
                "date": self.helper_date("2017-10-21"),
                "time": self.helper_time("08:50:00"),
                "value": 0
            })

        date = default_date,
        time = default_time
        self.check_item(
            date,
            time,
            "item:up date:2017-10-20 time:08:50",
            {
                "item": "up",
                "date": self.helper_date("2017-10-20"),
                "time": self.helper_time("08:50:00"),
                "value": 50
            })

    @staticmethod
    def helper_time(time_str):
        return datetime.datetime.strptime(time_str, "%H:%M:%S").time()

    @staticmethod
    def helper_date(date_str):
        return datetime.datetime.strptime(date_str, "%Y-%m-%d").date()


if __name__ == '__main__':
    unittest.main()
